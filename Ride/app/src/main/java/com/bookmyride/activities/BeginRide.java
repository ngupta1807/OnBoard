package com.bookmyride.activities;import android.Manifest;import android.app.AlertDialog;import android.app.Dialog;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.pm.PackageManager;import android.graphics.Color;import android.graphics.drawable.ColorDrawable;import android.net.Uri;import android.os.AsyncTask;import android.os.Build;import android.os.Bundle;import android.os.Handler;import android.os.SystemClock;import android.support.annotation.Nullable;import android.support.v4.app.ActivityCompat;import android.support.v4.content.ContextCompat;import android.support.v4.content.LocalBroadcastManager;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.CardView;import android.view.LayoutInflater;import android.view.MotionEvent;import android.view.View;import android.view.Window;import android.view.WindowManager;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.SeekBar;import android.widget.TextView;import android.widget.Toast;import com.google.android.gms.maps.CameraUpdateFactory;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.MapFragment;import com.google.android.gms.maps.OnMapReadyCallback;import com.google.android.gms.maps.model.BitmapDescriptorFactory;import com.google.android.gms.maps.model.CameraPosition;import com.google.android.gms.maps.model.LatLng;import com.google.android.gms.maps.model.LatLngBounds;import com.google.android.gms.maps.model.MarkerOptions;import com.google.android.gms.maps.model.PolylineOptions;import com.bookmyride.R;import com.bookmyride.api.APIHandler;import com.bookmyride.api.APIStatus;import com.bookmyride.api.AsyncTaskCompleteListener;import com.bookmyride.api.Config;import com.bookmyride.api.HTTPMethods;import com.bookmyride.api.Key;import com.bookmyride.common.Internet;import com.bookmyride.common.SessionHandler;import com.bookmyride.fcm.NotificationFilters;import com.bookmyride.fcm.NotificationUtils;import com.bookmyride.map.DirectionsJSONParser;import com.bookmyride.models.WaitingInfo;import com.bookmyride.services.RouteService;import com.bookmyride.util.Utils;import com.romainpiel.shimmer.Shimmer;import com.romainpiel.shimmer.ShimmerButton;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import java.util.HashMap;import java.util.List;public class BeginRide extends AppCompatActivity        implements View.OnTouchListener, AsyncTaskCompleteListener,        SeekBar.OnSeekBarChangeListener, OnMapReadyCallback {    //TrackGPS gps;    double latitude, longitude;    GoogleMap googleMap;    SeekBar sliderSeekBar;    ShimmerButton slider;    Shimmer shimmer;    String bookingId, passengerName, passengerPhone;    SessionHandler session;    String doAddress = "", doLat = "", doLng = "";    String puAddress = "", puLat = "", puLng = "";    private LatLng fromPosition;    private LatLng toPosition;    CardView cvDropoff;    TextView rideId, name/*, mobile*/;    private BroadcastReceiver mReceiver;    TextView startWait, stopWait;    TextView waitTime, pmtStatus, onBoard;    RelativeLayout timerLay;    private int mins;    private int secs;    private Handler customHandler = new Handler();    private boolean waitingStatus = false;    private long timeInMilliseconds = 0L;    private long timeSwapBuff = 0L;    private long updatedTime = 0L;    private long startTime = 0L;    LinearLayout layContact;    String bookingType, paymentStatus, driverCategory, cardValid="";    CardView cardInfo;    private void updatesliderUI() {        if (driverCategory.equals("1"))            sliderSeekBar.setThumb(getResources().getDrawable(R.drawable.slider_taxi));        else if (driverCategory.equals("2"))            sliderSeekBar.setThumb(getResources().getDrawable(R.drawable.slider_economy));        else if (driverCategory.equals("3"))            sliderSeekBar.setThumb(getResources().getDrawable(R.drawable.slider_premium));        else if (driverCategory.equals("4"))            sliderSeekBar.setThumb(getResources().getDrawable(R.drawable.slider_motor_bike));    }    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.begin_trip);        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);        init();        driverCategory = getIntent().getStringExtra("driverCategory");        updatesliderUI();        bookingId = getIntent().getStringExtra("bookingId");        passengerName = getIntent().getStringExtra("passenger_name");        passengerPhone = getIntent().getStringExtra("passenger_phone");        rideId.setText("RIDE_ID: " + bookingId);        name.setText("Passenger: " + passengerName);        //mobile.setText(passengerPhone);        //mobile.setText("Contact Passenger");        String dropOff = getIntent().getStringExtra("dropOff");        try {            JSONObject dropObj = new JSONObject(dropOff);            doAddress = dropObj.getString("address");            doLat = dropObj.getString("lat");            doLng = dropObj.getString("lng");        } catch (JSONException e) {            e.printStackTrace();        }        String pickup = getIntent().getStringExtra("pickUp");        try {            JSONObject pickObj = new JSONObject(pickup);            puAddress = pickObj.getString("address");            puLat = pickObj.getString("lat");            puLng = pickObj.getString("lng");        } catch (JSONException e) {            e.printStackTrace();        }        paymentStatus = getIntent().getStringExtra("payment_status");        bookingType = getIntent().getStringExtra("type");        if (paymentStatus.equals("1")) {            float scale = getResources().getDisplayMetrics().density;            int dpAsPixels = (int) (10 * scale + 0.5f);            pmtStatus.setPadding(dpAsPixels, dpAsPixels, dpAsPixels, dpAsPixels);            pmtStatus.setVisibility(View.VISIBLE);        } else pmtStatus.setVisibility(View.GONE);        if (doLat.equals("") || doLng.equals("") ||                doLat.equals("null") || doLng.equals("null")) {            cvDropoff.setVisibility(View.VISIBLE);        } else {            doAddres.setText(doAddress);            //cvDropoff.setVisibility(View.GONE);        }        WaitingInfo waitingInfo = session.getWaitingInfo();        updatedTime = waitingInfo.getUpdatedTime();        timeInMilliseconds = waitingInfo.getTimeInMilliseconds();        startTime = waitingInfo.getStartTime();        timeSwapBuff = waitingInfo.getTimeSwapBuff();        mins = waitingInfo.getMins();        secs = waitingInfo.getSecs();        waitTime.setText(mins + ":" + String.format("%02d", secs));        if (secs > 0 || mins > 0)            timerLay.setVisibility(View.VISIBLE);        getDriverGEO();    }    TextView doAddres;    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (resultCode == RESULT_OK) {            if (requestCode == 22) {                doAddres.setText(data.getStringExtra("Selected_Location"));                doLat = data.getStringExtra("Selected_Latitude");                doLng = data.getStringExtra("Selected_Longitude");                doAddress = data.getStringExtra("Selected_Location");                updateDropOffLocation();            }        } else {        }    }    private void getDriverGEO() {        type = 0;        if (Internet.hasInternet(this)) {            APIHandler apiHandler = new APIHandler(this, HTTPMethods.GET, this, null);            apiHandler.execute(Config.DRIVER_GEO + bookingId + "?expand=drivergeo,passanger", session.getToken());        } else            Alert("Alert!", getResources().getString(R.string.no_internet));    }    private void updateDropOffLocation() {        type = 2;        JSONObject dropoff = new JSONObject();        try {            dropoff.put("address", doAddress);            dropoff.put("lat", doLat);            dropoff.put("lng", doLng);        } catch (JSONException e) {            e.printStackTrace();        }        HashMap<String, String> jsonParams = new HashMap<String, String>();        jsonParams.put("dropOff", dropoff.toString());        if (Internet.hasInternet(this)) {            APIHandler apiHandler = new APIHandler(this, HTTPMethods.PUT, this, jsonParams);            apiHandler.execute(Config.BOOKING_REQUEST + "/" + bookingId, session.getToken());        } else            Alert("Alert!", getResources().getString(R.string.no_internet));    }    LinearLayout dropOffLay;    String msg = "";    private void init() {        session = new SessionHandler(this);        //gps = new TrackGPS(this);        //Rl_beginTrip = (RelativeLayout) findViewById(R.id.layout_begintrip);        initSlider();        rideId = (TextView) findViewById(R.id.ride_id);        name = (TextView) findViewById(R.id.name);        cardInfo = (CardView) findViewById(R.id.lay_info);        //mobile = (TextView) findViewById(R.id.mobile);        pmtStatus = (TextView) findViewById(R.id.payment_status);        doAddres = (TextView) findViewById(R.id.do_address);        cvDropoff = (CardView) findViewById(R.id.cv_dropoff);        layContact = (LinearLayout) findViewById(R.id.lay_contact);        layContact.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                showRideDialog();            }        });        dropOffLay = (LinearLayout) findViewById(R.id.lay_search);        dropOffLay.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                startActivityForResult(new Intent(BeginRide.this, SearchOnMap.class), 22);                overridePendingTransition(R.anim.slideup, R.anim.slidedown);            }        });        mReceiver = new BroadcastReceiver() {            @Override            public void onReceive(Context context, Intent intent) {                if (intent.getAction().equals(NotificationFilters.REQUEST_CANCELLED)) {                    if (session.getUserType().equals("4")) {                        try {                            JSONObject obj = new JSONObject(intent.getStringExtra("rideData"));                            msg = obj.getString("message");                            new Handler().postDelayed(new Runnable() {                                @Override                                public void run() {                                    /*startActivity(new Intent(getApplicationContext(), RideCancelledDialog.class)                                            .putExtra("message", msg));                                    overridePendingTransition(R.anim.fade_in, R.anim.fade_out);*/                                    Utils.showPopup(BeginRide.this, msg);                                }                            }, 500);                            /*new Handler().postDelayed(new Runnable() {                                @Override                                public void run() {                                    BeginRide.this.finish();                                }                            }, 5000);*/                        } catch (JSONException e) {                            e.printStackTrace();                        }                    }                } else if (intent.getAction().equals(NotificationFilters.LOCATION_CHANGED)) {                    double lat = intent.getDoubleExtra("lat", 0.0);                    double lng = intent.getDoubleExtra("lng", 0.0);                    latitude = lat;                    longitude = lng;                    LatLng currentPos = new LatLng(latitude, longitude);                    //googleMap.addMarker(new MarkerOptions().position(sydney).title("Marker Title").snippet("Marker Description"));                    if (googleMap != null) {                        zoomLevel = googleMap.getCameraPosition().zoom;                        if (zoomLevel < 15)                            zoomLevel = 15;                        CameraPosition cameraPosition = new CameraPosition.Builder().target(currentPos).zoom(zoomLevel).bearing(0).tilt(0).build();                        googleMap.moveCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));                    }                }            }        };        startWait = (TextView) findViewById(R.id.start_wait);        startWait.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                startWaiting();                stopWait.setVisibility(View.VISIBLE);                startWait.setVisibility(View.GONE);                timerLay.setVisibility(View.VISIBLE);                startTime = SystemClock.uptimeMillis();                customHandler.postDelayed(updateTimerThread, 0);                waitingStatus = true;            }        });        stopWait = (TextView) findViewById(R.id.stop_wait);        stopWait.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                //stopWaiting();                startWait.setVisibility(View.VISIBLE);                stopWait.setVisibility(View.GONE);                timeSwapBuff += timeInMilliseconds;                customHandler.removeCallbacks(updateTimerThread);                waitingStatus = false;            }        });        waitTime = (TextView) findViewById(R.id.timerValue);        timerLay = (RelativeLayout) findViewById(R.id.layout_timer);        onBoard = (TextView) findViewById(R.id.on_board);        onBoard.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (doLat.equals("") && doLat.equals("")) {                    Alert("Alert!", "Please enter Drop Off Location address.");                } else {                    beginRide("4");                }            }        });        cardInfo.setCardElevation(5);        cardInfo.setMaxCardElevation(6);        cardInfo.setRadius(0);    }    private void startWaiting() {        HashMap<String, String> jsonParams = new HashMap<String, String>();        jsonParams.put("status", "start");        jsonParams.put("booking_id", bookingId);        APIHandler apiHandler = new APIHandler(this, HTTPMethods.POST, new AsyncTaskCompleteListener() {            @Override            public void onTaskComplete(String result) {                //Log.d("waiting", result);            }        }, jsonParams);        apiHandler.execute(Config.WAIT_TIME_NOTIFICATION, session.getToken());    }    String waitSec = "0";    private void stopWaiting() {        HashMap<String, String> jsonParams = new HashMap<String, String>();        if (!waitTime.getText().toString().equals("0:00")) {            waitSec = getSeconds(waitTime.getText().toString());            jsonParams.put("waitTime", waitSec);        }        jsonParams.put("status", "stop");        jsonParams.put("booking_id", bookingId);        APIHandler apiHandler = new APIHandler(this, HTTPMethods.POST, new AsyncTaskCompleteListener() {            @Override            public void onTaskComplete(String result) {                //Log.d("waiting", result);            }        }, jsonParams);        apiHandler.execute(Config.WAIT_TIME_NOTIFICATION, session.getToken());    }    public String getSeconds(String time) {        String[] units = time.split(":"); //will break the string up into an array        int minutes = Integer.parseInt(units[0]); //first element        int seconds = Integer.parseInt(units[1]); //second element        int duration = 60 * minutes + seconds; //add up our values        return "" + duration;    }    private Runnable updateTimerThread = new Runnable() {        @Override        public void run() {            timeInMilliseconds = SystemClock.uptimeMillis() - startTime;            updatedTime = timeSwapBuff + timeInMilliseconds;            secs = (int) (updatedTime / 1000);            mins = secs / 60;            secs = secs % 60;            if (mins >= 60) {                mins = 00;            }            waitTime.setText(mins + ":" + String.format("%02d", secs));            customHandler.postDelayed(this, 0);        }    };    private void initSlider() {        shimmer = new Shimmer();        sliderSeekBar = (SeekBar) findViewById(R.id.begin_Trip_seek);        slider = (ShimmerButton) findViewById(R.id.begin_Trip_slider_button);        shimmer.start(slider);        sliderSeekBar.setOnSeekBarChangeListener(this);    }    private void initializeMap() {        if (googleMap == null) {            MapFragment mapFragment = (MapFragment) getFragmentManager()                    .findFragmentById(R.id.map);            try {                mapFragment.getMapAsync(this);            } catch (NullPointerException e) {                e.printStackTrace();            }            if (googleMap == null) {                //Toast.makeText(TrackDetail.this, "Sorry! unable to create maps", Toast.LENGTH_SHORT).show();            }        }    }    @Override    public void onMapReady(GoogleMap map) {        /* googleMap = map;        if (gps.canGetLocation()) {            // Move the camera to last position with a zoom level            CameraPosition cameraPosition = new CameraPosition.Builder().target(                    new LatLng(gps.getLatitude(), gps.getLongitude())).build();            googleMap.animateCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));        } else {            Alert("Alert!", getResources().getString(R.string.alert_gpsEnable));        } */        googleMap = map;        googleMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);        googleMap.getUiSettings().setZoomControlsEnabled(false);        googleMap.getUiSettings().setMyLocationButtonEnabled(false);        googleMap.getUiSettings().setCompassEnabled(false);        googleMap.getUiSettings().setRotateGesturesEnabled(true);        googleMap.getUiSettings().setZoomGesturesEnabled(true);        LatLng currentPos = new LatLng(latitude, longitude);        //googleMap.addMarker(new MarkerOptions().position(sydney).title("Marker Title").snippet("Marker Description"));        CameraPosition cameraPosition = new CameraPosition.Builder().target(currentPos).zoom(12f).bearing(0).tilt(0).build();        googleMap.moveCamera(CameraUpdateFactory.newCameraPosition(cameraPosition));        //Initialize Google Play Services        drawRoute();    }    float zoomLevel = 15;    @Override    public void onProgressChanged(SeekBar seekBar, int i, boolean b) {        //seekBar.setThumb(getResources().getDrawable(R.drawable.slidetounlock_arrow));    }    @Override    public void onStartTrackingTouch(SeekBar seekBar) {        slider.setVisibility(View.GONE);    }    @Override    public void onStopTrackingTouch(SeekBar seekBar) {        if (seekBar.getProgress() > 90) {            sliderSeekBar.setProgress(2);            if (doLat.equals("") && doLat.equals("")) {                Alert("Alert!", "Please enter Drop Off Location address.");            } else {                beginRide("4");            }        } else {            sliderSeekBar.setProgress(2);        }        updatesliderUI();    }    @Override    public boolean onTouch(View view, MotionEvent motionEvent) {        return false;    }    private void drawRoute() {        /*if (!doLat.equals("") && !doLng.equals("")) {            fromPosition = new LatLng(Double.parseDouble(puLat), Double.parseDouble(puLng));            toPosition = new LatLng(Double.parseDouble(doLat), Double.parseDouble(doLng));            Log.d("fromPos", ""+fromPosition);            Log.d("toPos", ""+toPosition);            if (fromPosition != null && toPosition != null) {                new GetRouteTask().execute();            }        }*/        if (!doLat.equals("") && !doLng.equals("")) {            fromPosition = new LatLng(Double.parseDouble(puLat), Double.parseDouble(puLng));            toPosition = new LatLng(Double.parseDouble(doLat), Double.parseDouble(doLng));            if (fromPosition != null && toPosition != null) {                //GetRouteTask draw_route_asyncTask = new GetRouteTask();                //draw_route_asyncTask.execute();                googleMap.addMarker(new MarkerOptions()                        .position(fromPosition)                        .icon(BitmapDescriptorFactory.fromResource(R.drawable.red_dot)));                googleMap.addMarker(new MarkerOptions()                        .position(toPosition)                        .icon(BitmapDescriptorFactory.fromResource(R.drawable.green_dot)));                String url = getDirectionsUrl(fromPosition, toPosition);                DownloadTask downloadTask = new DownloadTask();                downloadTask.execute(url);            }        }    }    int type;    private void beginRide(String status) {        type = 1;        HashMap<String, String> jsonParams = new HashMap<String, String>();        jsonParams.put("status", status);        if (Internet.hasInternet(this)) {            APIHandler apiHandler = new APIHandler(this, HTTPMethods.PUT, this, jsonParams);            apiHandler.execute(Config.BOOKING_STATUS + bookingId, session.getToken());        } else            Alert("Alert!", getResources().getString(R.string.no_internet));    }    @Override    public void onTaskComplete(String result) {        handleResponse(result);    }    private void handleResponse(String result) {        try {            JSONObject outJson = new JSONObject(result);            if (outJson.getInt(Key.STATUS) == APIStatus.SUCCESS) {                if (type == 0) {                    JSONObject dataObj = outJson.getJSONObject(Key.DATA);                    paymentStatus = dataObj.get("paymentStatus").toString();                    if (paymentStatus.equals("1")) {                        float scale = getResources().getDisplayMetrics().density;                        int dpAsPixels = (int) (10 * scale + 0.5f);                        pmtStatus.setPadding(dpAsPixels, dpAsPixels, dpAsPixels, dpAsPixels);                        pmtStatus.setVisibility(View.VISIBLE);                    } else pmtStatus.setVisibility(View.GONE);                    if (dataObj.has("paymentDetail")) {                        String paymentInfo = dataObj.get("paymentDetail").toString();                        if (!paymentInfo.equals("") && !paymentInfo.equals("null")) {                            JSONObject payObj = new JSONObject(paymentInfo);                            if (payObj.has("isCardValid"))                                cardValid = payObj.get("isCardValid").toString();                            else cardValid = "";                        }                    }                    if (cardValid.equals("0")) {                        pmtStatus.setText("Credit Card Invalid");                        pmtStatus.setBackgroundResource(R.drawable.rounded_red);                        float scale = getResources().getDisplayMetrics().density;                        int dpAsPixels = (int) (10 * scale + 0.5f);                        pmtStatus.setPadding(dpAsPixels, dpAsPixels, dpAsPixels, dpAsPixels);                        pmtStatus.setVisibility(View.VISIBLE);                    } else pmtStatus.setVisibility(View.GONE);                    String passengerInfo = dataObj.getString("passanger");                    if (!passengerInfo.equals("") && !passengerInfo.equals("null")) {                        JSONObject passengerObj = new JSONObject(passengerInfo);                        passengerName = passengerObj.getString("fullName");                        if (passengerObj.getString("dial_code").equals("null") ||                                passengerObj.getString("dial_code").equals(""))                            passengerPhone = passengerObj.getString("phone");                        else                            passengerPhone = passengerObj.getString("dial_code") + passengerObj.getString("phone");                    }                    if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                        if (checkLocationPermission())                            initializeMap();                    } else                        initializeMap();                } else if (type == 1) {                    JSONObject dropOff = new JSONObject();                    try {                        dropOff.put("address", doAddress);                        dropOff.put("lat", doLat);                        dropOff.put("lng", doLng);                    } catch (JSONException e) {                        e.printStackTrace();                    }                    session.saveWaitingInfo(updatedTime, timeInMilliseconds, startTime, timeSwapBuff, mins, secs);                    startActivity(new Intent(BeginRide.this, EndRide.class)                                    .putExtra("bookingId", bookingId)                                    .putExtra("driverCategory", getIntent().getStringExtra("driverCategory"))                                    .putExtra("pickUp", getIntent().getStringExtra("pickUp"))                                    .putExtra("type", bookingType)                                    .putExtra("is_discount", getIntent().getBooleanExtra("is_discount", false))                                    .putExtra("passenger_name", passengerName)                                    .putExtra("passenger_phone", passengerPhone)                                    .putExtra("payment_status", paymentStatus)                                    .putExtra("dropOff", dropOff.toString())                            /*.putExtra("updatedTime", updatedTime)                            .putExtra("mins", mins)                            .putExtra("secs", secs)                            .putExtra("timeInMilliseconds", timeInMilliseconds)                            .putExtra("startTime", startTime)                            .putExtra("timeSwapBuff", timeSwapBuff)*/);                    overridePendingTransition(R.anim.fade_in, R.anim.fade_out);                    BeginRide.this.finish();                } else if (type == 2) {                    /*if(googleMap != null){                        drawRoute();                    } else {*/                    googleMap.clear();                    googleMap = null;                    initializeMap();                    //}                } else if (type == 3) {                    Alert("Success!", "Message has sent to driver.");                }            } else if (outJson.getInt(Key.STATUS) == APIStatus.UNPROCESSABLE) {                JSONArray dataArray = outJson.getJSONArray(Key.DATA);                JSONObject obj = dataArray.getJSONObject(0);                Alert("Alert!", obj.getString(Key.MESSAGE));            } else {                Alert("Alert!", outJson.getString(Key.MESSAGE));            }        } catch (JSONException e) {            e.printStackTrace();        }    }    private void Alert(String title, String message) {        final com.bookmyride.views.AlertDialog mDialog = new com.bookmyride.views.AlertDialog(BeginRide.this, true);        mDialog.setDialogTitle(title);        mDialog.setDialogMessage(message);        mDialog.setPositiveButton(getResources().getString(R.string.ok), new View.OnClickListener() {            @Override            public void onClick(View v) {                mDialog.dismiss();            }        });        mDialog.show();    }    @Override    protected void onResume() {        super.onResume();        LocalBroadcastManager.getInstance(this).registerReceiver(mReceiver,                new IntentFilter(NotificationFilters.REQUEST_CANCELLED));        LocalBroadcastManager.getInstance(this).registerReceiver(mReceiver,                new IntentFilter(NotificationFilters.LOCATION_CHANGED));        NotificationUtils.clearNotifications(getApplicationContext());    }    @Override    protected void onStart() {        super.onStart();        startService(new Intent(this, RouteService.class));    }    @Override    protected void onPause() {        LocalBroadcastManager.getInstance(this).unregisterReceiver(mReceiver);        super.onPause();    }    @Override    protected void onDestroy() {        session.saveWaitingInfo(updatedTime, timeInMilliseconds, startTime, timeSwapBuff, mins, secs);        LocalBroadcastManager.getInstance(this).unregisterReceiver(mReceiver);        super.onDestroy();    }    private String getDirectionsUrl(LatLng origin, LatLng dest) {        // Origin of route        String str_origin = "origin=" + origin.latitude + "," + origin.longitude;        // Destination of route        String str_dest = "destination=" + dest.latitude + "," + dest.longitude;        // Sensor enabled        String sensor = "sensor=false";        String alternatives = "alternatives=true";        String mode = "mode=transit";        // Building the parameters to the web service        String parameters = str_origin + "&" + str_dest + "&" + sensor;        // Output format        String output = "json";        // Building the url to the web service        String url = "https://maps.googleapis.com/maps/api/directions/" + output + "?alternatives=true&" + parameters + "&key=" + Config.PLACE_API;        return url;    }    /**     * A method to download json data from url     */    private String downloadUrl(String strUrl) throws IOException {        String data = "";        InputStream iStream = null;        HttpURLConnection urlConnection = null;        try {            URL url = new URL(strUrl);            // Creating an http connection to communicate with url            urlConnection = (HttpURLConnection) url.openConnection();            // Connecting to url            urlConnection.connect();            // Reading data from url            iStream = urlConnection.getInputStream();            BufferedReader br = new BufferedReader(new InputStreamReader(iStream));            StringBuffer sb = new StringBuffer();            String line = "";            while ((line = br.readLine()) != null) {                sb.append(line);            }            data = sb.toString();            br.close();        } catch (Exception e) {            e.printStackTrace();        } finally {            iStream.close();            urlConnection.disconnect();        }        return data;    }    /**     * A class to download data from Google Directions URL     */    private class DownloadTask extends AsyncTask<String, Void, String> {        // Downloading data in non-ui thread        @Override        protected String doInBackground(String... url) {            // For storing data from web service            String data = "";            try {                // Fetching the data from web service                data = downloadUrl(url[0]);            } catch (Exception e) {                e.printStackTrace();            }            return data;        }        // Executes in UI thread, after the execution of        // doInBackground()        @Override        protected void onPostExecute(String result) {            super.onPostExecute(result);            ParserTask parserTask = new ParserTask();            // Invokes the thread for parsing the JSON data            parserTask.execute(result);        }    }    /**     * A class to parse the Google Directions in JSON format     */    private class ParserTask extends AsyncTask<String, Integer, List<List<HashMap<String, String>>>> {        // Parsing the data in non-ui thread        @Override        protected List<List<HashMap<String, String>>> doInBackground(String... jsonData) {            JSONObject jObject;            List<List<HashMap<String, String>>> routes = null;            try {                jObject = new JSONObject(jsonData[0]);                DirectionsJSONParser parser = new DirectionsJSONParser();                // Starts parsing data                routes = parser.parse(jObject);            } catch (Exception e) {                e.printStackTrace();            }            return routes;        }        // Executes in UI thread, after the parsing process        @Override        protected void onPostExecute(List<List<HashMap<String, String>>> result) {            try {                ArrayList<LatLng> points = null;                PolylineOptions lineOptions = null;                // Traversing through all the routes                for (int i = 0; i < result.size(); i++) {                    points = new ArrayList<LatLng>();                    lineOptions = new PolylineOptions();                    // Fetching i-th route                    List<HashMap<String, String>> path = result.get(i);                    // Fetching all the points in i-th route                    for (int j = 0; j < path.size(); j++) {                        HashMap<String, String> point = path.get(j);                        double lat = Double.parseDouble(point.get("lat"));                        double lng = Double.parseDouble(point.get("lng"));                        LatLng position = new LatLng(lat, lng);                        points.add(position);                    }                    // Adding all the points in the route to LineOptions                    lineOptions.addAll(points);                    lineOptions.width(10);                    lineOptions.color(Color.RED);                }                // Drawing polyline in the Google Map for the i-th route                googleMap.addPolyline(lineOptions);                LatLngBounds.Builder bc = new LatLngBounds.Builder();                for (LatLng item : points) {                    bc.include(item);                }                googleMap.moveCamera(CameraUpdateFactory.newLatLngBounds(bc.build(), 50));            } catch (NullPointerException e) {                e.printStackTrace();            }        }    }    public static final int MY_PERMISSIONS_REQUEST_LOCATION = 99;    public boolean checkLocationPermission() {        if (ContextCompat.checkSelfPermission(this,                Manifest.permission.ACCESS_FINE_LOCATION)                != PackageManager.PERMISSION_GRANTED) {            if (ActivityCompat.shouldShowRequestPermissionRationale(this,                    Manifest.permission.ACCESS_FINE_LOCATION)) {                ActivityCompat.requestPermissions(this,                        new String[]{Manifest.permission.ACCESS_FINE_LOCATION},                        MY_PERMISSIONS_REQUEST_LOCATION);            } else {                // No explanation needed, we can request the permission.                ActivityCompat.requestPermissions(this,                        new String[]{Manifest.permission.ACCESS_FINE_LOCATION},                        MY_PERMISSIONS_REQUEST_LOCATION);            }            return false;        } else {            return true;        }    }    @Override    public void onRequestPermissionsResult(int requestCode,                                           String permissions[], int[] grantResults) {        switch (requestCode) {            case MY_PERMISSIONS_REQUEST_LOCATION:                if (grantResults.length > 0                        && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                    if (ContextCompat.checkSelfPermission(this,                            Manifest.permission.ACCESS_FINE_LOCATION)                            == PackageManager.PERMISSION_GRANTED) {                        googleMap.setMyLocationEnabled(false);                        googleMap.getUiSettings().setMyLocationButtonEnabled(false);                        initializeMap();                    }                } else {                    Toast.makeText(this, "permission denied", Toast.LENGTH_LONG).show();                }                break;            case PERMISSION_REQUEST_CODE:                if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {                    Intent callIntent = new Intent(Intent.ACTION_CALL);                    callIntent.setData(Uri.parse("tel:" + passengerPhone));                    startActivity(callIntent);                }                break;        }    }    public void showRideDialog() {        final Dialog mDialog = new Dialog(BeginRide.this, R.style.rideDialog);        mDialog.setCancelable(false);        mDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);        mDialog.getWindow().setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));        mDialog.setContentView(R.layout.fragment_list);        mDialog.setCanceledOnTouchOutside(true);        TextView title = (TextView) mDialog.findViewById(R.id.title);        title.setVisibility(View.VISIBLE);        title.setText("Select Contact Type");        mDialog.setOnCancelListener(new DialogInterface.OnCancelListener() {            @Override            public void onCancel(DialogInterface dialog) {                mDialog.dismiss();            }        });        mDialog.setOnDismissListener(new DialogInterface.OnDismissListener() {            @Override            public void onDismiss(DialogInterface dialog) {                mDialog.dismiss();            }        });        ListView dialog_ListView = (ListView) mDialog.findViewById(R.id.list);        ArrayAdapter<String>                adapter = new ArrayAdapter<>(this,                R.layout.simple_list_item, R.id.textItem, getContactType());        dialog_ListView.setAdapter(adapter);        dialog_ListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view,                                    int position, long id) {                if (parent.getItemAtPosition(position).toString().equals("SMS")) {                    showMessageDialog();                } else if (parent.getItemAtPosition(position).toString().equals("CALL")) {                    //callPassenger();                    getTwillioNumber();                }                mDialog.dismiss();            }        });        mDialog.show();    }    private void getTwillioNumber() {        if (Internet.hasInternet(this)) {            APIHandler apiHandler = new APIHandler(this, HTTPMethods.GET, new AsyncTaskCompleteListener() {                @Override                public void onTaskComplete(String result) {                    try {                        JSONObject object = new JSONObject(result);                        if (object.getInt(Key.STATUS) == APIStatus.SUCCESS) {                            JSONObject dataObj = object.getJSONObject(Key.DATA);                            passengerPhone = dataObj.getString("twilio_number");                            callPassenger();                        } else if (object.getInt(Key.STATUS) == APIStatus.UNPROCESSABLE) {                            Alert("Alert!", object.getString(Key.MESSAGE));                        } else {                            Alert("Alert!", object.getString(Key.MESSAGE));                        }                    } catch (JSONException e) {                        e.printStackTrace();                    }                }            }, null);            apiHandler.execute(Config.GET_TWILLIO_NUMBER + bookingId, session.getToken());        } else            Alert("Alert!", getResources().getString(R.string.no_internet));    }    private void callPassenger() {        if (Build.VERSION.SDK_INT >= 23) {            // Marshmallow+            if (!checkCallPhonePermission() || !checkReadStatePermission()) {                requestPermission();            } else {                Intent callIntent = new Intent(Intent.ACTION_CALL);                callIntent.setData(Uri.parse("tel:" + passengerPhone));                startActivity(callIntent);            }        } else {            Intent callIntent = new Intent(Intent.ACTION_CALL);            callIntent.setData(Uri.parse("tel:" + passengerPhone));            startActivity(callIntent);        }    }    private boolean checkCallPhonePermission() {        int result = ContextCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE);        if (result == PackageManager.PERMISSION_GRANTED) {            return true;        } else {            return false;        }    }    private boolean checkReadStatePermission() {        int result = ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE);        if (result == PackageManager.PERMISSION_GRANTED) {            return true;        } else {            return false;        }    }    private void requestPermission() {        ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.CALL_PHONE,                Manifest.permission.READ_PHONE_STATE}, PERMISSION_REQUEST_CODE);    }    final int PERMISSION_REQUEST_CODE = 111;    private void showMessageDialog() {        LayoutInflater inflater = LayoutInflater.from(BeginRide.this);        View subView = inflater.inflate(R.layout.message_dialog, null);        final EditText subEditText = (EditText) subView.findViewById(R.id.bid_price);        TextView proceed = (TextView) subView.findViewById(R.id.send);        TextView cancel = (TextView) subView.findViewById(R.id.cancel);        AlertDialog.Builder builder = new AlertDialog.Builder(BeginRide.this);        builder.setView(subView);        final AlertDialog alertDialog = builder.create();        proceed.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                if (subEditText.getText().toString().length() > 0) {                    alertDialog.dismiss();                    sendMessageToDriver(subEditText.getText().toString());                } else                    Alert("Alert!", "Please enter message.");            }        });        cancel.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                alertDialog.dismiss();            }        });        alertDialog.show();    }    private void sendMessageToDriver(String message) {        type = 3;        HashMap<String, String> params = new HashMap<String, String>();        params.put("msgFrom", session.getUserID());        params.put("msgTo", passengerPhone);        params.put("booking_id", bookingId);        params.put("msg", message);        //Log.e("param", params.toString());        if (Internet.hasInternet(this)) {            APIHandler apiHandler = new APIHandler(this, HTTPMethods.POST, this, params);            apiHandler.execute(Config.SEND_MESSAGE_DRIVER, session.getToken());        } else            Alert("Alert!", getResources().getString(R.string.no_internet));    }    public String[] getContactType() {        String[] gateway = getResources().getStringArray(R.array.contact_via);        return gateway;    }}