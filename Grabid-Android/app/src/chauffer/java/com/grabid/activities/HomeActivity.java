package com.grabid.activities;import android.app.AlarmManager;import android.app.AlertDialog;import android.app.Fragment;import android.app.FragmentManager;import android.app.PendingIntent;import android.content.BroadcastReceiver;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.IntentFilter;import android.content.res.Resources;import android.graphics.Bitmap;import android.graphics.drawable.Drawable;import android.os.Build;import android.os.Bundle;import android.os.Environment;import android.support.annotation.Nullable;import android.support.v4.content.LocalBroadcastManager;import android.support.v4.view.GravityCompat;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.app.AppCompatActivity;import android.util.DisplayMetrics;import android.util.Log;import android.view.MotionEvent;import android.view.View;import android.view.WindowManager;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.RatingBar;import android.widget.RelativeLayout;import android.widget.TextView;import com.grabid.R;import com.grabid.api.AsyncTaskCompleteListener;import com.grabid.api.Config;import com.grabid.api.HTTPMethods;import com.grabid.api.RestAPICall;import com.grabid.common.AlertManager;import com.grabid.common.BackPressed;import com.grabid.common.Internet;import com.grabid.common.SessionManager;import com.grabid.fragments.Bookmarked;import com.grabid.fragments.ChangePassword;import com.grabid.fragments.ChargeMe;import com.grabid.fragments.Collect;import com.grabid.fragments.DeliveryInfo;import com.grabid.fragments.Favourite;import com.grabid.fragments.FavouriteGroups;import com.grabid.fragments.FavouriteView;import com.grabid.fragments.Feedback;import com.grabid.fragments.Help;import com.grabid.fragments.HomeMap;import com.grabid.fragments.Invite;import com.grabid.fragments.Notifications;import com.grabid.fragments.PayMe;import com.grabid.fragments.Preferences;import com.grabid.fragments.PreviewTransfer;import com.grabid.fragments.ProfileStepOne;import com.grabid.fragments.ProfileStepThree;import com.grabid.fragments.ProfileStepTwo;import com.grabid.fragments.ReferralEarning;import com.grabid.fragments.Search;import com.grabid.fragments.Settings;import com.grabid.fragments.SubmitStepOne;import com.grabid.fragments.SubmitStepTwo;import com.grabid.fragments.TransferDispatcherList;import com.grabid.fragments.TransferDriverList;import com.grabid.models.UserInfo;import com.grabid.services.GPSTracker;import com.grabid.services.LocationProvider;import com.grabid.services.LocationTracker;import com.readystatesoftware.viewbadger.BadgeView;import com.squareup.picasso.Picasso;import com.squareup.picasso.Target;import org.json.JSONException;import org.json.JSONObject;import java.io.File;import java.util.HashMap;import me.leolin.shortcutbadger.ShortcutBadger;import static com.grabid.R.id.imageView;/** * Created by vinod on 10/14/2016. */public class HomeActivity extends AppCompatActivity implements View.OnClickListener,        AsyncTaskCompleteListener, FragmentManager.OnBackStackChangedListener {    public static FragmentManager fragmentManager;    public static ImageView navDrawer;    ImageView profilePic;    private DrawerLayout mDrawerLayout;    ActionBarDrawerToggle toggle;    public static TextView title, filter, addmore;    TextView user, home, shipper, driver, account, invite, bookmarked, help, logout, referral;    TextView profile, chargeMe, payMe, preference, settings, notification, shipperFeedback,            mFavourite, driverFeedback, shipperSubmit, shipperDelivery, driverDelivery, searchDeliveries, wallet, changePassword, mFavouriteLocations,            mFavouriteOut, mFavouriteGroups;    LinearLayout layShipper, layDriver, layMyAccount, layReferral, mLayFavourite;    Resources resources;    SessionManager session;    UserInfo userInfo;    public static ImageView edit;    int feedbackType;    RatingBar ratingShipper, ratingDriver;    GPSTracker gps;    double latitude, longitude;    public static TextView track_delivery;    public static TextView markread;    String type = "1";    String notificationType = "";    public static RelativeLayout mToolbar;    ProgressBar mProgressBar;    public static BadgeView badge, badgeProfile, badgeAccount;    boolean IsProfileUpdate;    Target target;    boolean mIsAwardMessage = false;    boolean mIsCreditNoti = false;    public static Boolean IsDeliveryInfo = false, IsBankDetail = false, IsCreditCard = false;    boolean IsShipmentClick = false;    TextView mCollect;    float dp1;    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        try {            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);        } catch (Exception e) {            e.toString();        }        setContentView(R.layout.activity_home);        init();        try {            LocationProvider locationProvider = LocationProvider.getInstance();            locationProvider.configureIfNeeded(this);            startLocationTracker();        } catch (Exception e) {            e.toString();        }        try {            ShortcutBadger.applyCount(HomeActivity.this, 0);        } catch (Exception e) {            e.toString();        }        try {            if (getIntent().hasExtra("SearchDel")) {                displayView(11);            } else if (userInfo.isLogin() && !userInfo.getHas_unread_notifications().equals("0")) {                displayView(12);                session.saveIsLogin(false);                userInfo.setLogin(false);            } else if (getIntent().hasExtra("data")) {                IsShipmentClick = false;                displayView(13);            } else if (getIntent().hasExtra("SubmitStepTwo")) {                displayView(28);            } else if (getIntent().hasExtra("dialogactivity")) {                mIsAwardMessage = true;                displayView(0);            } else if (getIntent().hasExtra("creditcarddecline")) {                mIsCreditNoti = true;                displayView(9);            } else if (getIntent().hasExtra("favourite")) {                displayView(22);            } else if (getIntent().hasExtra("profileup")) {                displayView(8);            } else if (getIntent().hasExtra("signaturetype")) {                type = getIntent().getStringExtra("signaturetype");                //  type = getIntent().getIntExtra("signaturetype", 1);                if (type.equals("1"))                    displayView(2);                else                    displayView(1);            } else if (getIntent().hasExtra("delivery_id")) {                try {                    String delivery_id = getIntent().getStringExtra("delivery_id");                    notificationType = getIntent().getStringExtra("type");                    // String message = getIntent().getStringExtra("message");                    if (delivery_id != null && !delivery_id.contentEquals("")) {                        if (notificationType != null && !notificationType.contentEquals("") && (notificationType.equals("61") || notificationType.equals("62")))                            displayView(20);                        else if(notificationType.equals("10") ){                            displayView(11);                        }                        else                            displayView(20);                    } else                        displayView(0);                } catch (Exception e) {                    displayView(20);                }            } else                displayView(0);        } catch (Exception e) {            e.toString();        }        if (gps.canGetLocation()) {            latitude = gps.getLatitude();            longitude = gps.getLongitude();        }        target = new Target() {            @Override            public void onBitmapLoaded(Bitmap bitmap, Picasso.LoadedFrom from) {            }            @Override            public void onBitmapFailed(Drawable errorDrawable) {            }            @Override            public void onPrepareLoad(Drawable placeHolderDrawable) {            }        };    }    private Fragment getVisibleFragment() {        return getFragmentManager().findFragmentById(R.id.container);    }    private void startLocationTracker() {        // Configure the LocationTracker's broadcast receiver to run every 5 minutes.        try {            Intent intent = new Intent(this, LocationTracker.class);            AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);            PendingIntent pendingIntent = PendingIntent.getBroadcast(this, 0, intent, 0);           /* alarmManager.setInexactRepeating(AlarmManager.RTC_WAKEUP, Calendar.getInstance().getTimeInMillis(),                    LocationProvider.TEN_SECOND, pendingIntent);*/            registerExactAlarm(pendingIntent, LocationProvider.TEN_SECOND);        } catch (Exception e) {            e.toString();        }    }    private void registerExactAlarm(PendingIntent sender, long delayInMillis) {        try {            final int SDK_INT = Build.VERSION.SDK_INT;            AlarmManager am = (AlarmManager) HomeActivity.this.getSystemService(Context.ALARM_SERVICE);            long timeInMillis = (System.currentTimeMillis() + delayInMillis) / 1000 * 1000;     //> example            if (SDK_INT < Build.VERSION_CODES.KITKAT) {                am.set(AlarmManager.RTC_WAKEUP, timeInMillis, sender);            } else if (Build.VERSION_CODES.KITKAT <= SDK_INT && SDK_INT < Build.VERSION_CODES.M) {                am.setExact(AlarmManager.RTC_WAKEUP, timeInMillis, sender);            } else if (SDK_INT >= Build.VERSION_CODES.M) {                am.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, timeInMillis, sender);            }        } catch (Exception e) {            e.toString();        }    }    public static float convertDpToPixel(float dp, Context context) {        Resources resources = context.getResources();        DisplayMetrics metrics = resources.getDisplayMetrics();        float px = dp * ((float) metrics.densityDpi / DisplayMetrics.DENSITY_DEFAULT);        return px;    }    private void init() {        gps = new GPSTracker(HomeActivity.this);        resources = getResources();        fragmentManager = getFragmentManager();        dp1 = convertDpToPixel(10f, getApplicationContext());        session = new SessionManager(this);        String token = session.getGCMKey();        userInfo = session.getUserDetails();        user = (TextView) findViewById(R.id.user);        profilePic = (ImageView) findViewById(imageView);        ratingDriver = (RatingBar) findViewById(R.id.rating_driver);        ratingShipper = (RatingBar) findViewById(R.id.rating_shipper);        navDrawer = (ImageView) findViewById(R.id.nav);        mToolbar = (RelativeLayout) findViewById(R.id.toolbar);        mToolbar.setBackgroundColor(getResources().getColor(R.color.top_bar_color));        edit = (ImageView) findViewById(R.id.edit);        edit.setOnClickListener(this);        mFavourite = (TextView) findViewById(R.id.favourite);        mFavourite.setOnClickListener(this);        mFavouriteLocations = (TextView) findViewById(R.id.favouritelocations);        mFavouriteLocations.setOnClickListener(this);        mFavouriteGroups = (TextView) findViewById(R.id.favouritegroups);        mFavouriteGroups.setOnClickListener(this);        mFavouriteOut = (TextView) findViewById(R.id.favouriteout);        mLayFavourite = (LinearLayout) findViewById(R.id.lay_favourite);        mCollect = (TextView) findViewById(R.id.colect);        mCollect.setOnClickListener(this);        mFavouriteOut.setOnClickListener(this);        track_delivery = (TextView) findViewById(R.id.copy);        markread = (TextView) findViewById(R.id.markread);        track_delivery.setOnClickListener(this);        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);        toggle = new ActionBarDrawerToggle(this, mDrawerLayout, null, R.string.openDrawer, R.string.closeDrawer);        mDrawerLayout.addDrawerListener(toggle);        toggle.syncState();        navDrawer.setOnClickListener(this);        title = (TextView) findViewById(R.id.title);        filter = (TextView) findViewById(R.id.filter);        addmore = (TextView) findViewById(R.id.addmore);        home = (TextView) findViewById(R.id.home);        home.setOnClickListener(this);        shipper = (TextView) findViewById(R.id.shipper);        shipper.setOnClickListener(this);        driver = (TextView) findViewById(R.id.driver);        driver.setOnClickListener(this);        account = (TextView) findViewById(R.id.account);        account.setOnClickListener(this);        invite = (TextView) findViewById(R.id.invite);        invite.setOnClickListener(this);        bookmarked = (TextView) findViewById(R.id.bookmark);        bookmarked.setOnClickListener(this);        help = (TextView) findViewById(R.id.help);        help.setOnClickListener(this);        logout = (TextView) findViewById(R.id.logout);        logout.setOnClickListener(this);        layDriver = (LinearLayout) findViewById(R.id.lay_driver);        layShipper = (LinearLayout) findViewById(R.id.lay_shipper);        layMyAccount = (LinearLayout) findViewById(R.id.lay_account);        profile = (TextView) findViewById(R.id.profile);        profile.setOnClickListener(this);        chargeMe = (TextView) findViewById(R.id.charge_me);        chargeMe.setOnClickListener(this);        payMe = (TextView) findViewById(R.id.pay_me);        payMe.setOnClickListener(this);        preference = (TextView) findViewById(R.id.preference);        preference.setOnClickListener(this);        changePassword = (TextView) findViewById(R.id.changepassword);        changePassword.setOnClickListener(this);        settings = (TextView) findViewById(R.id.settings);        settings.setOnClickListener(this);        notification = (TextView) findViewById(R.id.notification);        notification.setOnClickListener(this);        badge = new BadgeView(this, notification);        badgeProfile = new BadgeView(this, profile);        badgeAccount = new BadgeView(this, account);        //badgeAccount.setBackground(getResources().getDrawable(R.drawable.badgedotnew));        badgeAccount.setWidth((int) dp1);        badgeAccount.setHeight((int) dp1);        badgeAccount.setY((int) dp1);        badgeAccount.setTop((int) dp1);        badgeProfile.setWidth((int) dp1);        badgeProfile.setHeight((int) dp1);        badgeProfile.setTop((int) dp1);        badgeProfile.setY((int) dp1);        referral = (TextView) findViewById(R.id.referral);        referral.setOnClickListener(this);        shipperFeedback = (TextView) findViewById(R.id.feedback_shipper);        shipperFeedback.setOnClickListener(this);        driverFeedback = (TextView) findViewById(R.id.feedback_driver);        driverFeedback.setOnClickListener(this);        shipperSubmit = (TextView) findViewById(R.id.shipper_submit);        shipperSubmit.setOnClickListener(this);        shipperDelivery = (TextView) findViewById(R.id.shipper_delivery);        shipperDelivery.setOnClickListener(this);        driverDelivery = (TextView) findViewById(R.id.driver_delivery);        driverDelivery.setOnClickListener(this);        searchDeliveries = (TextView) findViewById(R.id.search_deliveries);        searchDeliveries.setOnClickListener(this);        wallet = (TextView) findViewById(R.id.wallet);        mProgressBar = (ProgressBar) findViewById(R.id.progressbar);        wallet.setOnClickListener(this);        layReferral = (LinearLayout) findViewById(R.id.lay_referal);        HomeActivity.edit.setVisibility(View.VISIBLE);        Log.d("img_url", userInfo.getProfileImage());        String profileImg = userInfo.getProfileImage();        // profileImg = "http://demo.grabidnow.com/frontend/web/images/uploads/driver_profile/varun%20_profile_118.jpg";        //imgLoader.DisplayImage(userInfo.getProfileImage(), profilePic);        //        try {            if (userInfo.getProfileImage() != null && !userInfo.getProfileImage().equals("") && !userInfo.getProfileImage().contentEquals("null"))                Picasso.with(HomeActivity.this).load(userInfo.getProfileImage()).into(profilePic);            else {                mProgressBar.setVisibility(View.GONE);                profilePic.setImageDrawable(getResources().getDrawable(R.drawable.defaultimg));            }        } catch (Exception e) {            e.toString();        }        if (userInfo.getUserName() != null && !userInfo.getUserName().contentEquals("null"))            user.setText(userInfo.getUserName());        else            user.setText("UserName");        try {            if (!userInfo.getDriverRating().contentEquals("")) {                ratingDriver.setRating(Float.valueOf(userInfo.getDriverRating()));            }            if (!userInfo.getShipperRating().contentEquals("")) {                ratingShipper.setRating(Float.valueOf(userInfo.getShipperRating()));            }        } catch (Exception e) {            e.toString();        }        ratingDriver.setFocusable(false);        ratingShipper.setFocusable(false);        ratingShipper.setOnTouchListener(new View.OnTouchListener() {            public boolean onTouch(View v, MotionEvent event) {                return true;            }        });        ratingDriver.setOnTouchListener(new View.OnTouchListener() {            public boolean onTouch(View v, MotionEvent event) {                return true;            }        });        if (userInfo.getIsprofileCompleted().equals("0"))            badgeAccount.show();        else            badgeAccount.hide();    }    @Override    public void onBackPressed() {        String name = this.getClass().getName();        Fragment fragment = getFragmentManager().findFragmentById(R.id.container);        if (!(fragment instanceof BackPressed) || !((BackPressed) fragment).onBackPressed()) {            if (getVisibleFragment().getTag().equalsIgnoreCase(this.getClass().getName())) {                showExitDialog();            } else {                getFragmentManager().popBackStack();            }        }    }    /* @Override     protected void onResume() {         super.onResume();         FragmentTransaction ft = getFragmentManager().beginTransaction();         ft.hide(myFrag);         ft.commit();     } */    private void showProfileDialog() {        AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);        builder.setTitle("Success!");        builder.setMessage(getResources().getString(R.string.profileactivate));        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {            @Override            public void onClick(final DialogInterface dialog, int which) {                displayView(8);            }        });        builder.setNegativeButton("No Thanks", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();            }        });        AlertDialog alert = builder.create();        alert.show();    }    /* private void showEmailConfirmDialog() {         AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);         builder.setTitle("Alert!");         builder.setMessage("Thanks for joining the GRABiD community. To search for deliveries or submit deliveries, please verify your email and your account needs to be approved by admin.");         builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {             @Override             public void onClick(final DialogInterface dialog, int which) {                 dialog.dismiss();             }         });         AlertDialog alert = builder.create();         alert.show();     }*/    private void showEmailConfirmDialog() {        String message = "";        if (userInfo.getAdminApprovalStatus().equals("0") && userInfo.getVerifiedStatus().equals("0"))            message = getResources().getString(R.string.verifyemailandaccount);        else if (userInfo.getAdminApprovalStatus().equals("0"))            message = getResources().getString(R.string.verifyadmin);        else if (userInfo.getVerifiedStatus().equals("0"))            message = getResources().getString(R.string.verifyemail);        AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);        builder.setTitle("Alert!");        builder.setMessage(message);        builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {            @Override            public void onClick(final DialogInterface dialog, int which) {                dialog.dismiss();            }        });        AlertDialog alert = builder.create();        alert.show();    }    private void showExitDialog() {        AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);        builder.setTitle(getResources().getString(R.string.app_name));        builder.setMessage(getResources().getString(R.string.quitapp));        builder.setPositiveButton("YES", new DialogInterface.OnClickListener() {            @Override            public void onClick(final DialogInterface dialog, int which) {                dialog.dismiss();                HomeActivity.this.finish();                System.exit(0);            }        });        builder.setNegativeButton("NO", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();            }        });        AlertDialog alert = builder.create();        alert.show();    }    public void navigationDrawerVisibility(int val) {        switch (val) {            case 0:                if (layShipper.getVisibility() == View.VISIBLE)                    layShipper.setVisibility(View.GONE);                if (layDriver.getVisibility() == View.VISIBLE)                    layDriver.setVisibility(View.GONE);                if (layMyAccount.getVisibility() == View.VISIBLE) {                    layMyAccount.setVisibility(View.GONE);                    if ((userInfo.getIsprofileCompleted().equals("0"))) {                        badgeProfile.hide();                        badgeAccount.show();                    } else {                        badgeProfile.hide();                        badgeAccount.hide();                    }                }                if (mLayFavourite.getVisibility() == View.VISIBLE)                    mLayFavourite.setVisibility(View.GONE);                if (layReferral.getVisibility() == View.VISIBLE)                    layReferral.setVisibility(View.GONE);                break;            case 1:                if (layDriver.getVisibility() == View.VISIBLE)                    layDriver.setVisibility(View.GONE);                if (layMyAccount.getVisibility() == View.VISIBLE) {                    layMyAccount.setVisibility(View.GONE);                    if ((userInfo.getIsprofileCompleted().equals("0"))) {                        badgeProfile.hide();                        badgeAccount.show();                    } else {                        badgeProfile.hide();                        badgeAccount.hide();                    }                }                if (mLayFavourite.getVisibility() == View.VISIBLE)                    mLayFavourite.setVisibility(View.GONE);                if (layReferral.getVisibility() == View.VISIBLE)                    layReferral.setVisibility(View.GONE);                break;            case 2:                if (layShipper.getVisibility() == View.VISIBLE)                    layShipper.setVisibility(View.GONE);                if (layMyAccount.getVisibility() == View.VISIBLE) {                    layMyAccount.setVisibility(View.GONE);                    if ((userInfo.getIsprofileCompleted().equals("0"))) {                        badgeProfile.hide();                        badgeAccount.show();                    } else {                        badgeProfile.hide();                        badgeAccount.hide();                    }                }                if (mLayFavourite.getVisibility() == View.VISIBLE)                    mLayFavourite.setVisibility(View.GONE);                if (layReferral.getVisibility() == View.VISIBLE)                    layReferral.setVisibility(View.GONE);                break;            case 3:                if (layShipper.getVisibility() == View.VISIBLE)                    layShipper.setVisibility(View.GONE);                if (layDriver.getVisibility() == View.VISIBLE)                    layDriver.setVisibility(View.GONE);                if (mLayFavourite.getVisibility() == View.VISIBLE)                    mLayFavourite.setVisibility(View.GONE);                if (layReferral.getVisibility() == View.VISIBLE)                    layReferral.setVisibility(View.GONE);                break;            case 4:                if (layShipper.getVisibility() == View.VISIBLE)                    layShipper.setVisibility(View.GONE);                if (layDriver.getVisibility() == View.VISIBLE)                    layDriver.setVisibility(View.GONE);                if (layMyAccount.getVisibility() == View.VISIBLE) {                    layMyAccount.setVisibility(View.GONE);                    if ((userInfo.getIsprofileCompleted().equals("0"))) {                        badgeProfile.hide();                        badgeAccount.show();                    } else {                        badgeProfile.hide();                        badgeAccount.hide();                    }                }                if (layReferral.getVisibility() == View.VISIBLE)                    layReferral.setVisibility(View.GONE);                break;            case 5:                if (layShipper.getVisibility() == View.VISIBLE)                    layShipper.setVisibility(View.GONE);                if (layDriver.getVisibility() == View.VISIBLE)                    layDriver.setVisibility(View.GONE);                if (layMyAccount.getVisibility() == View.VISIBLE) {                    layMyAccount.setVisibility(View.GONE);                    if ((userInfo.getIsprofileCompleted().equals("0"))) {                        badgeProfile.hide();                        badgeAccount.show();                    } else {                        badgeProfile.hide();                        badgeAccount.hide();                    }                }                if (mLayFavourite.getVisibility() == View.VISIBLE)                    mLayFavourite.setVisibility(View.GONE);                break;        }    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.home:                mDrawerLayout.closeDrawer(GravityCompat.START);                navigationDrawerVisibility(0);                displayView(0);                break;            case R.id.shipper:                navigationDrawerVisibility(1);                if (layShipper.getVisibility() == View.VISIBLE)                    layShipper.setVisibility(View.GONE);                else                    layShipper.setVisibility(View.VISIBLE);                break;            case R.id.driver:                navigationDrawerVisibility(2);                if (layDriver.getVisibility() == View.VISIBLE)                    layDriver.setVisibility(View.GONE);                else                    layDriver.setVisibility(View.VISIBLE);                break;            case R.id.account:                navigationDrawerVisibility(3);                if (layMyAccount.getVisibility() == View.VISIBLE) {                    layMyAccount.setVisibility(View.GONE);                    if ((userInfo.getIsprofileCompleted().equals("0"))) {                        badgeProfile.hide();                        badgeAccount.show();                    } else {                        badgeProfile.hide();                        badgeAccount.hide();                    }                } else {                    layMyAccount.setVisibility(View.VISIBLE);                    if ((userInfo.getIsprofileCompleted().equals("0"))) {                        badgeProfile.show();                        badgeAccount.hide();                    } else {                        badgeProfile.hide();                        badgeAccount.hide();                    }                }                break;            case R.id.favouriteout:                navigationDrawerVisibility(4);                if (mLayFavourite.getVisibility() == View.VISIBLE)                    mLayFavourite.setVisibility(View.GONE);                else                    mLayFavourite.setVisibility(View.VISIBLE);                break;            case R.id.invite:                mDrawerLayout.closeDrawer(GravityCompat.START);                navigationDrawerVisibility(0);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(3);                break;            case R.id.help:                mDrawerLayout.closeDrawer(GravityCompat.START);                navigationDrawerVisibility(0);                displayView(4);                break;            case R.id.profile:                mDrawerLayout.closeDrawer(GravityCompat.START);                displayView(8);                break;            case R.id.charge_me:                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(9);                break;            case R.id.pay_me:                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(10);                break;            case R.id.colect:                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(29);                break;            case R.id.preference:                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(5);                break;            case R.id.changepassword:                mDrawerLayout.closeDrawer(GravityCompat.START);                displayView(7);                break;            case R.id.settings:                mDrawerLayout.closeDrawer(GravityCompat.START);                displayView(16);                break;            case R.id.favourite:                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(22);                break;            case R.id.favouritegroups:                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(25);                break;            case R.id.favouritelocations:                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(24);                break;            case R.id.notification:                mDrawerLayout.closeDrawer(GravityCompat.START);                navigationDrawerVisibility(0);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(12);                break;            case R.id.referral:                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(15);                break;            case R.id.feedback_shipper:                feedbackType = 1;                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(6);                break;            case R.id.feedback_driver:                feedbackType = 2;                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(6);                break;            case R.id.shipper_delivery:                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(1);                break;            case R.id.shipper_submit:                mDrawerLayout.closeDrawer(GravityCompat.START);                userInfo = session.getUserDetails();                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else if (userInfo.getCreditCard() == null)                    AlertManager.BankmessageDialog(HomeActivity.this, "Alert!", getResources().getString(R.string.creditcard), this.getClass().getName(), "2");                else if (userInfo.getCreditCard().contentEquals("null"))                    AlertManager.BankmessageDialog(HomeActivity.this, "Alert!", getResources().getString(R.string.creditcard), this.getClass().getName(), "2");                else {                    IsShipmentClick = true;                    displayView(13);                }                break;            case R.id.search_deliveries:                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(11);                break;            case R.id.driver_delivery:                mDrawerLayout.closeDrawer(GravityCompat.START);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(2);                break;            case R.id.nav:                removeHandleIfExists();                try {                    Fragment instance = getFragmentManager().findFragmentById(R.id.container);                    if (instance instanceof DeliveryInfo) {                        String name = this.getClass().getName();                        if (getVisibleFragment().getTag().equalsIgnoreCase(this.getClass().getName())) {                            Intent refresh = new Intent(HomeActivity.this, HomeActivity.class);                            startActivity(refresh);//Start the same Activity                            finish();                        } else {                            getFragmentManager().popBackStack();                        }                    } else if (getVisibleFragment().getTag().equals(this.getClass().getName())) {                        fragmentManager.popBackStack(this.getClass().getName(), FragmentManager.POP_BACK_STACK_INCLUSIVE);                        mDrawerLayout.openDrawer(GravityCompat.START);                    } else {                        onBackPressed();                    }                } catch (Exception e) {                }                break;            case R.id.bookmark:                mDrawerLayout.closeDrawer(GravityCompat.START);                navigationDrawerVisibility(0);                if (userInfo.getIsprofileCompleted().equals("0"))                    showProfileDialog();                else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))                    showEmailConfirmDialog();                else                    displayView(14);                break;            case R.id.logout:                mDrawerLayout.closeDrawer(GravityCompat.START);                showLogoutDialog();                break;            case R.id.wallet:                navigationDrawerVisibility(5);                if (layReferral.getVisibility() == View.VISIBLE)                    layReferral.setVisibility(View.GONE);                else                    layReferral.setVisibility(View.VISIBLE);                break;        }    }    public void removeHandleIfExists() {        try {            DeliveryInfo.handler.removeCallbacks(DeliveryInfo.runnable);        } catch (Exception ex) {            Log.v("", ex.toString());        }    }    private BroadcastReceiver ratings = new BroadcastReceiver() {        @Override        public void onReceive(Context context, Intent intent) {            // TODO Auto-generated method stub            String str = intent.getAction();            try {                if (str != null && str.contentEquals("sendRatings")) {                    if (!intent.getStringExtra("driverRating").contentEquals(""))                        ratingDriver.setRating(Float.valueOf(intent.getStringExtra("driverRating")));                    if (!intent.getStringExtra("shipperRating").contentEquals(""))                        ratingShipper.setRating(Float.valueOf(intent.getStringExtra("shipperRating")));                    session.saveRatings(intent.getStringExtra("shipperRating"), intent.getStringExtra("driverRating"));                    Log.v("", "");                } else if (str != null && str.contentEquals("sendCount")) {                    if (intent.getStringExtra("count") != null && !intent.getStringExtra("count").contentEquals("")) {                        try {                            if (intent.getStringExtra("count").contentEquals("0")) {                                badge.hide();                            } else {                                badge.setText(intent.getStringExtra("count"));                                badge.show();                            }                        } catch (Exception e) {                            e.toString();                        }                    } else {                        badge.hide();                    }                }            } catch (Exception e) {                e.toString();            }        }    };    @Override    protected void onResume() {        super.onResume();        try {            userInfo = session.getUserDetails();            if (!userInfo.getDriverRating().contentEquals(""))                ratingDriver.setRating(Float.valueOf(userInfo.getDriverRating()));            if (!userInfo.getShipperRating().contentEquals(""))                ratingShipper.setRating(Float.valueOf(userInfo.getShipperRating()));            if (session.getCount() != null && !session.getCount().contentEquals("")) {                if (!session.getCount().contentEquals("0")) {                    badge.setText(session.getCount());                    badge.show();                }            }        } catch (Exception e) {            e.toString();        }        LocalBroadcastManager.getInstance(this).registerReceiver(ratings, new IntentFilter("sendRatings"));        LocalBroadcastManager.getInstance(this).registerReceiver(ratings, new IntentFilter("sendCount"));    }    @Override    protected void onPause() {        super.onPause();        LocalBroadcastManager.getInstance(this).unregisterReceiver(ratings);    }    private void displayView(int position) {        Fragment fragment = null;        HomeActivity.addmore.setVisibility(View.GONE);        switch (position) {            case 20:                setTitle(resources.getString(R.string.deliveries));                fragment = new DeliveryInfo();                Bundle bundle2 = new Bundle();                bundle2.putString("delivery_id", getIntent().getStringExtra("delivery_id"));                bundle2.putString("incoming_type", "notification");                bundle2.putString("incoming_delivery_type", "10");                bundle2.putString("notificationtype", notificationType);                fragment.setArguments(bundle2);                break;            case 0:                setTitle(resources.getString(R.string.home));                fragment = new HomeMap();                //fragment = new DeliveryInfo();                break;            case 1:                setTitle(resources.getString(R.string.deliveries));                fragment = new TransferDispatcherList();                break;            case 2:                setTitle(resources.getString(R.string.deliveries));                fragment = new TransferDriverList();                Bundle bundlee = new Bundle();                bundlee.putInt("type", Integer.parseInt(type));                fragment.setArguments(bundlee);                type = "1";                break;            case 3:                setTitle(resources.getString(R.string.in_vite));                fragment = new Invite();                break;            case 4:                setTitle(resources.getString(R.string.help));                fragment = new Help();                break;            case 5:                setTitle(resources.getString(R.string.preference));                fragment = new Preferences();                break;            case 6:                if (feedbackType == 1)                    setTitle(resources.getString(R.string.shipper_feedback));                else setTitle(resources.getString(R.string.driver_feedback));                fragment = new Feedback();                Bundle bundle = new Bundle();                bundle.putInt("type", feedbackType);                fragment.setArguments(bundle);                break;            case 7:                setTitle(resources.getString(R.string.change_password));                fragment = new ChangePassword();                break;            case 8:                setTitle(resources.getString(R.string.profile));                /*if (session.getUserDetails().getIsprofileCompleted().equals("0")) {                    if (session.getUserDetails().getIslaststep().equals("0")) {                        fragment = new ProfileStepOne();                        IsProfileUpdate = true;                    }                    else if (session.getUserDetails().getIslaststep().equals("1")) {                        fragment = new ProfileStepTwo();                    }                    else {                        fragment = new ProfileStepThree();                    }                } else {*/                    fragment = new ProfileStepOne();                    IsProfileUpdate = true;               /* }*/                break;            case 9:                setTitle(resources.getString(R.string.creditcard));                fragment = new ChargeMe();                if (mIsCreditNoti) {                    Bundle bundlecredit = new Bundle();                    bundlecredit.putString("UITYPE", "5");                    fragment.setArguments(bundlecredit);                    mIsCreditNoti = false;                }                break;            case 10:                setTitle(resources.getString(R.string.bankdetails));                fragment = new PayMe();                break;            case 11:                setTitle(resources.getString(R.string.search_delivery));                fragment = new Search();                break;            case 12:                setTitle(resources.getString(R.string.notification));                fragment = new Notifications();                break;            case 13:                setTitle(resources.getString(R.string.submitdelivery));                fragment = new SubmitStepOne();                Bundle bundleS = new Bundle();                if (!IsShipmentClick) {                    if (getIntent().hasExtra("data")) {                        bundleS.putSerializable("data", getIntent().getExtras().getSerializable("data"));                        fragment.setArguments(bundleS);                    } else                        session.saveCurrentScreen("copy");                } else                    session.saveCurrentScreen("copy");                fragment.setArguments(bundleS);                break;            case 14:                setTitle(resources.getString(R.string.bookmarked));                fragment = new Bookmarked();                break;            case 15:                setTitle(resources.getString(R.string.referral));                fragment = new ReferralEarning();                break;            case 16:                setTitle(resources.getString(R.string.setting));                fragment = new Settings();                break;            case 21:                setTitle(resources.getString(R.string.submitdelivery));                fragment = new SubmitStepOne();                Bundle bundle3 = new Bundle();                bundle3.putString("delivery_id", getIntent().getStringExtra("delivery_id"));                fragment.setArguments(bundle3);                break;            case 22:                setTitle(resources.getString(R.string.favourite));                fragment = new Favourite();                if (getIntent().hasExtra("group_id")) {                    Bundle bundle4 = new Bundle();                    bundle4.putString("group_id", getIntent().getStringExtra("group_id"));                    bundle4.putString("incoming_type", "home");                    fragment.setArguments(bundle4);                    getIntent().removeExtra("group_id");                }                break;            case 24:                setTitle(resources.getString(R.string.favouritelocation));                fragment = new FavouriteView();                break;            case 25:                setTitle(resources.getString(R.string.favouritegroups));                fragment = new FavouriteGroups();                break;            case 29:                setTitle(resources.getString(R.string.collect));                fragment = new Collect();                break;            case 28:                setTitle(resources.getString(R.string.submitdelivery));                fragment = new SubmitStepTwo();                //  session.saveCurrentScreen("copy");                Bundle bundleSh = new Bundle();                if (getIntent().hasExtra("SubmitStepTwo")) {                    bundleSh.putSerializable("data", getIntent().getExtras().getSerializable("SubmitStepTwo"));                    bundleSh.putString("home", "home");                    fragment.setArguments(bundleSh);                }                fragment.setArguments(bundleSh);            default:                break;        }        String backStateName = this.getClass().getName();        fragmentManager.beginTransaction().replace(R.id.container, fragment, backStateName)                .addToBackStack(null)                .commitAllowingStateLoss();        getFragmentManager().addOnBackStackChangedListener(this);        if (mIsAwardMessage) {            if (getIntent().hasExtra("dialogactivity")) {                mIsAwardMessage = false;                showAwardMessage();            }        }    }    public void showAwardMessage() {        try {            Intent resultIntent = new Intent(this, DialogActivity.class);            resultIntent.putExtra("title", getIntent().getExtras().getString("title"));            resultIntent.putExtra("message", getIntent().getExtras().getString("message"));            resultIntent.putExtra("delivery_id", getIntent().getExtras().getString("delivery_id"));            resultIntent.putExtra("type", getIntent().getExtras().getString("type"));            resultIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);            this.startActivity(resultIntent);        } catch (Exception e) {            e.toString();        }    }    private void setTitle(String text) {        title.setText(text);    }    public void onSearch(View view) {        if (userInfo.getIsprofileCompleted() != null && userInfo.getIsprofileCompleted().equals("0"))            showProfileDialog();        else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))            showEmailConfirmDialog();        else            displayView(11);    }    public void onSubmitShipment(View view) {        userInfo = session.getUserDetails();        if (userInfo.getIsprofileCompleted() != null && userInfo.getIsprofileCompleted().equals("0"))            showProfileDialog();        else if (userInfo.getAdminApprovalStatus().equals("0") || userInfo.getVerifiedStatus().equals("0"))            showEmailConfirmDialog();        else if (userInfo.getCreditCard() == null)            AlertManager.BankmessageDialog(HomeActivity.this, "Alert!", getResources().getString(R.string.creditcard), this.getClass().getName(), "2");        else if (userInfo.getCreditCard().contentEquals("null"))            AlertManager.BankmessageDialog(HomeActivity.this, "Alert!", getResources().getString(R.string.creditcard), this.getClass().getName(), "2");        else {            IsShipmentClick = true;            displayView(13);        }    }    public void onReadyToBid(View view) {        // Toast.makeText(getApplicationContext(), "In-Progress", Toast.LENGTH_LONG).show();    }    private void showLogoutDialog() {        AlertDialog.Builder builder = new AlertDialog.Builder(HomeActivity.this);        builder.setTitle("Alert!");        builder.setMessage(getResources().getString(R.string.logoutmsg));        builder.setPositiveButton("YES", new DialogInterface.OnClickListener() {            @Override            public void onClick(final DialogInterface dialog, int which) {                dialog.dismiss();                //Call logout API                doLogout();            }        });        builder.setNegativeButton("NO", new DialogInterface.OnClickListener() {            @Override            public void onClick(DialogInterface dialog, int which) {                dialog.dismiss();            }        });        AlertDialog alert = builder.create();        alert.show();    }    @Override    public void onTaskComplete(String result) {        handleResponse(result);    }    private void handleResponse(String result) {        Log.d(Config.TAG, result);        try {            JSONObject outterJson = new JSONObject(result);            //if(outterJson.getInt(Config.STATUS) == APIStatus.SUCCESS) {}            String root = Environment.getExternalStorageDirectory().toString();            File pic = new File(root + "/GRABiD/profile_pic.png");            File licence = new File(root + "/GRABiD/licence_pic.png");            deleteRecursive(pic);            deleteRecursive(licence);            session.saveToken("");            Intent intent = new Intent(getApplicationContext(), SignIn.class);            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);            startActivity(intent);            finish();        } catch (JSONException e) {            e.printStackTrace();        }    }    void deleteRecursive(File fileOrDirectory) {        if (fileOrDirectory.isDirectory())            for (File child : fileOrDirectory.listFiles())                deleteRecursive(child);        fileOrDirectory.delete();    }    private void doLogout() {        HashMap<String, String> params = new HashMap<>();        String url = Config.SERVER_URL + Config.LOGOUT;        params.put("auth_key", session.getToken());        if (Internet.hasInternet(this)) {            RestAPICall mobileAPI = new RestAPICall(this, HTTPMethods.POST, this, params);            mobileAPI.execute(url, session.getToken());        } else AlertManager.messageDialog(this, "Alert!", "");    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == 9) {            Fragment fragment = getFragmentManager().findFragmentById(R.id.container);            fragment.onActivityResult(requestCode, resultCode, data);        } else if (requestCode == 200) {            Fragment fragment = getFragmentManager().findFragmentById(R.id.container);            fragment.onActivityResult(requestCode, resultCode, data);        }    }    @Override    public void onBackStackChanged() {        try {            Fragment instance = getFragmentManager().findFragmentById(R.id.container);            if (instance instanceof ProfileStepOne) {                Log.v("", "profile called");                ProfileStepOne fragment = (ProfileStepOne) instance;                session = new SessionManager(HomeActivity.this);                boolean IsStepOne;                if (session.getUserDetails().getUserName() == null)                    IsStepOne = false;                else if (session.getUserDetails().getUserName().contentEquals("") || session.getUserDetails().getUserName().contentEquals("null"))                    IsStepOne = false;                else IsStepOne = true;                if (IsProfileUpdate) {                    //if (!IsStepOne)                    if (userInfo.getIsprofileCompleted().equals("0"))                        ProfileStepOne.Iseditable = true;                    else                        ProfileStepOne.Iseditable = false;                    fragment.UpdateDesign(true);                    IsProfileUpdate = false;                } else {                    fragment.UpdateDesign(false);                }            } else if (instance instanceof ProfileStepTwo) {                ProfileStepTwo fragment = (ProfileStepTwo) instance;                fragment.UpdateDesign();            } else if (instance instanceof ProfileStepThree) {                ProfileStepThree fragment = (ProfileStepThree) instance;                fragment.UpdateDesign();            } else if (instance instanceof SubmitStepOne) {                SubmitStepOne fragment = (SubmitStepOne) instance;                fragment.UpdateDesign();            } else if (instance instanceof SubmitStepTwo) {                SubmitStepTwo fragment = (SubmitStepTwo) instance;                fragment.UpdateDesign();            } else if (instance instanceof PreviewTransfer) {                PreviewTransfer fragment = (PreviewTransfer) instance;                fragment.UpdateDesign();            } else if (instance instanceof HomeMap) {                HomeMap fragment = (HomeMap) instance;                fragment.UpdateDesign();            } else if (instance instanceof Help) {                Help fragment = (Help) instance;                fragment.UpdateDesign();            } else if (instance instanceof ChargeMe) {                ChargeMe fragment = (ChargeMe) instance;                if (getVisibleFragment().getTag().equalsIgnoreCase(this.getClass().getName()))                    fragment.UpdateDesign(1);                else                    fragment.UpdateDesign(0);            } else if (instance instanceof PayMe) {                PayMe fragment = (PayMe) instance;                if (getVisibleFragment().getTag().equalsIgnoreCase(this.getClass().getName()))                    fragment.UpdateDesign(1);                else                    fragment.UpdateDesign(0);            }        } catch (Exception e) {            e.toString();        }    }}